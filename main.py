import asyncio
import requests
import os
from datetime import datetime
from collections import Counter
import matplotlib.pyplot as plt
import logging
from telegram import (
    Bot, Update, InputFile,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TELEGRAM_BOT_TOKEN, YANDEX_TOKEN, CHANNEL_ID]):
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
editing_active = False
last_track_id = None
last_status = None
editing_task = None
message_id = None
HISTORY_FILE = "track_history.txt"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üéß –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üî• –¢–æ–ø")],
        [KeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫"), KeyboardButton("‚èπ –°—Ç–æ–ø")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

def get_current_track():
    try:
        headers = {
            "User-Agent": "Mozilla/5.0",
            "Accept": "application/json",
            "ya-token": YANDEX_TOKEN
        }
        
        response = requests.get(
            "https://api_1.mipoh.ru/get_current_track_beta",
            headers=headers,
            timeout=10,
            verify=False
        )
        
        if response.status_code != 200:
            logger.error(f"API –≤–µ—Ä–Ω—É–ª–æ —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return None
            
        data = response.json()
        
        if data.get("paused") or not data.get("track"):
            return "paused"
            
        track = data["track"]
        track_id = track.get("track_id")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫
        link = track.get("link") or f"https://music.yandex.ru/search?text={track['title']} {track['artists']}"
        
        return {
    "id": track_id,
    "title": track.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
    "artists": (
        track.get("artist") 
        if isinstance(track.get("artist"), str)
        else ", ".join(track.get("artist", [])) 
        if track.get("artist") 
        else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
    ),
    "link": link
}
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return None
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def save_track_to_history(title, artists):
    try:
        with open(HISTORY_FILE, "a", encoding="utf-8") as f:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
            f.write(f"{timestamp} | {title} ‚Äî {artists}\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

async def track_loop(bot: Bot):
    global editing_active, last_track_id, message_id, last_status
    
    while editing_active:
        try:
            await asyncio.sleep(5)
            track = get_current_track()
            
            if not track:
                continue
                
            if track == "paused":
                if last_status != "paused":
                    keyboard = [[InlineKeyboardButton("üéß –û—Ç–∫—Ä—ã—Ç—å –Ø.–ú—É–∑—ã–∫—É", url="https://music.yandex.ru")]]
                    await bot.edit_message_text(
                        chat_id=CHANNEL_ID,
                        message_id=message_id,
                        text="‚è∏ –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    last_status = "paused"
                    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–æ: –ü–∞—É–∑–∞")
                continue
                
            if isinstance(track, dict) and track["id"] != last_track_id:
                text = f"üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {track['title']} ‚Äî {track['artists']}"
                keyboard = [[InlineKeyboardButton("üéß –°–ª—É—à–∞—Ç—å", url=track["link"])]]
                
                await bot.edit_message_text(
                    chat_id=CHANNEL_ID,
                    message_id=message_id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
                save_track_to_history(track['title'], track['artists'])
                last_track_id = track["id"]
                last_status = "playing"
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {text}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ track_loop: {e}")
            await asyncio.sleep(10)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global editing_active, editing_task, message_id, last_track_id
    
    if editing_active:
        await update.message.reply_text("–£–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é üé∂", reply_markup=reply_keyboard)
        return
        
    editing_active = True
    last_track_id = None
    
    try:
        msg = await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text="üéß –û–∂–∏–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞...",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üéß –û—Ç–∫—Ä—ã—Ç—å –Ø.–ú—É–∑—ã–∫—É", url="https://music.yandex.ru")]])
        )
        message_id = msg.message_id
        editing_task = asyncio.create_task(track_loop(context.bot))
        await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ", reply_markup=reply_keyboard)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s", update.effective_user.full_name)
    except Exception as e:
        editing_active = False
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        if text == "üéß –ò—Å—Ç–æ—Ä–∏—è":
            await history(update, context)
        elif text == "üî• –¢–æ–ø":
            await top(update, context)
        elif text == "üìà –ì—Ä–∞—Ñ–∏–∫":
            await chart(update, context)
        elif text == "‚èπ –°—Ç–æ–ø":
            await stop(update, context)
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ {text}: {e}")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global editing_active, editing_task, message_id
    
    editing_active = False
    if editing_task:
        editing_task.cancel()
        editing_task = None
        
    try:
        await context.bot.delete_message(chat_id=CHANNEL_ID, message_id=message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
    await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üõë", reply_markup=reply_keyboard)
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s", update.effective_user.full_name)

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not os.path.exists(HISTORY_FILE):
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            return
            
        with open(HISTORY_FILE, encoding="utf-8") as f:
            lines = f.readlines()[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç—Ä–µ–∫–æ–≤
            
        history_text = "".join(lines).strip() or "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
        await update.message.reply_text(f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–∫–∏:\n{history_text}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ history: {e}")

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not os.path.exists(HISTORY_FILE):
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return
            
        with open(HISTORY_FILE, encoding="utf-8") as f:
            lines = f.readlines()
            
        artists = [line.split("‚Äî")[-1].strip() for line in lines if "‚Äî" in line]
        count = Counter(artists)
        
        if not count:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞.")
            return
            
        top_text = "\n".join([f"{i+1}. {name} ‚Äî {qty}" for i, (name, qty) in enumerate(count.most_common(10))])
        await update.message.reply_text(f"üî• –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:\n{top_text}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ top: {e}")

async def chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not os.path.exists(HISTORY_FILE):
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return
            
        hours = []
        with open(HISTORY_FILE, encoding="utf-8") as f:
            for line in f:
                if "|" in line:
                    try:
                        time_part = line.split("|")[0].strip()
                        hour = int(time_part.split(" ")[1].split(":")[0])
                        hours.append(hour)
                    except (IndexError, ValueError):
                        continue
                        
        if not hours:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        plt.figure(figsize=(10, 5))
        plt.bar(*zip(*sorted(Counter(hours).items())), color='skyblue')
        plt.title("üéß –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º")
        plt.xlabel("–ß–∞—Å –¥–Ω—è")
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤")
        plt.xticks(range(24))
        plt.grid(True, linestyle='--', alpha=0.7)
        
        chart_path = f"chart_{update.effective_user.id}.png"
        plt.savefig(chart_path, bbox_inches='tight')
        plt.close()
        
        await update.message.reply_photo(
            photo=InputFile(chart_path),
            caption="–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π"
        )
        
        try:
            os.remove(chart_path)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ chart: {e}")

if __name__ == "__main__":
    try:
        app = ApplicationBuilder() \
            .token(TELEGRAM_BOT_TOKEN) \
            .post_init(lambda _: logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")) \
            .build()
            
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
