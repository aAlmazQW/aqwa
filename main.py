import asyncio
import requests
import os
import logging
from telegram import (
    Bot, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, Update
)
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import BadRequest, TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_track_id = None
message_id = None
bot_active = False
is_paused = False
last_image = None

def get_current_track():
    logger.info(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {data}")
    global is_paused
    
    try:
        headers = {
            "ya-token": YANDEX_TOKEN,
            "User-Agent": "Mozilla/5.0"
        }
        r = requests.get(
            "https://api_1.mipoh.ru/get_current_track_beta", 
            headers=headers, 
            timeout=10, 
            verify=False
        )
        
        if r.status_code != 200:
            logger.warning(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {r.status_code}")
            return None
            
        data = r.json()
        logger.debug(f"API response: {data}")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—É–∑—É (–µ—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–∞)
        if not data.get("track"):
            is_paused = True
            logger.info("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã")
            return None
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—É–∑—ã
        if data.get("is_paused", False):
            is_paused = True
            logger.info("–Ø–≤–Ω—ã–π —Ñ–ª–∞–≥ –ø–∞—É–∑—ã –≤ API")
            return None
        
        # –ï—Å–ª–∏ —Ç—Ä–µ–∫ –µ—Å—Ç—å –∏ –Ω–µ—Ç –ø–∞—É–∑—ã
        is_paused = False
        t = data["track"]
        return {
            "id": t.get("track_id"),
            "title": t.get("title"),
            "artists": t.get("artist") if isinstance(t.get("artist"), str) else ", ".join(t.get("artist", [])),
            "link": f"https://music.yandex.ru/track/{t.get('track_id')}",
            "img": t.get("img")
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}", exc_info=True)
        return None

async def send_new_track_message(bot: Bot, track: dict) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫–æ–º"""
    try:
        caption = f"{track['title']} ‚Äî {track['artists']}"
        keyboard = [[InlineKeyboardButton("üéß –°–ª—É—à–∞—Ç—å –≤ –Ø.–ú—É–∑—ã–∫–µ", url=track["link"])]]
        markup = InlineKeyboardMarkup(keyboard)
        
        msg = await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=track["img"],
            caption=caption,
            reply_markup=markup
        )
        logger.info(f"–ù–æ–≤—ã–π —Ç—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {caption}")
        return msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
        return None

async def send_pause_message(bot: Bot) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ"""
    try:
        text = "‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ"
        msg = await bot.send_message(
            chat_id=CHANNEL_ID,
            text=text
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—É–∑—ã: {e}")
        return None

async def edit_track_message(bot: Bot, track: dict, msg_id: int) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫–æ–º"""
    try:
        caption = f"{track['title']} ‚Äî {track['artists']}"
        media = InputMediaPhoto(media=track["img"], caption=caption)
        keyboard = [[InlineKeyboardButton("üéß –°–ª—É—à–∞—Ç—å –≤ –Ø.–ú—É–∑—ã–∫–µ", url=track["link"])]]
        markup = InlineKeyboardMarkup(keyboard)
        
        await bot.edit_message_media(
            chat_id=CHANNEL_ID,
            message_id=msg_id,
            media=media,
            reply_markup=markup
        )
        logger.info(f"–¢—Ä–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {caption}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
        return False

async def edit_to_pause_message(bot: Bot, msg_id: int, last_image: str) -> bool:
    """–ò–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã"""
    try:
        if last_image:
            media = InputMediaPhoto(media=last_image, caption="‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ")
            await bot.edit_message_media(
                chat_id=CHANNEL_ID,
                message_id=msg_id,
                media=media,
                reply_markup=None
            )
        else:
            await bot.edit_message_caption(
                chat_id=CHANNEL_ID,
                message_id=msg_id,
                caption="‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ",
                reply_markup=None
            )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ø–∞—É–∑—É")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –ø–∞—É–∑—É: {e}")
        return False

async def delete_channel_message(bot: Bot, msg_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        await bot.delete_message(chat_id=CHANNEL_ID, message_id=msg_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

async def track_checker():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤"""
    global last_track_id, message_id, bot_active, is_paused, last_image
    
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    logger.info("–¢—Ä–µ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    last_status = None
    
    while True:
        if not bot_active:
            await asyncio.sleep(5)
            continue
            
        track = get_current_track()
        current_status = "pause" if is_paused else "play"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if current_status != last_status:
            logger.info(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: {last_status} ‚Üí {current_status}")
            last_status = current_status
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã
        if is_paused:
            if last_status != "pause":
                logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã")
                
                if message_id:
                    if not await edit_to_pause_message(bot, message_id, last_image):
                        message_id = await send_pause_message(bot) or message_id
                else:
                    message_id = await send_pause_message(bot)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        elif track:
            last_image = track["img"]
            
            if message_id is None:
                message_id = await send_new_track_message(bot, track)
                if message_id:
                    last_track_id = track["id"]
            elif track["id"] != last_track_id:
                if await edit_track_message(bot, track, message_id):
                    last_track_id = track["id"]
                else:
                    message_id = None
        
        await asyncio.sleep(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start"""
    global bot_active, message_id
    
    if bot_active:
        await update.message.reply_text("üî¥ –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return
    
    bot_active = True
    message_id = None
    await update.message.reply_text("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...")
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /stop"""
    global bot_active, message_id, last_track_id, is_paused, last_image
    
    if not bot_active:
        await update.message.reply_text("üî¥ –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    bot_active = False
    
    if message_id:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await delete_channel_message(bot, message_id)
    
    message_id = None
    last_track_id = None
    is_paused = False
    last_image = None
    
    await update.message.reply_text("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /stop")

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["TELEGRAM_BOT_TOKEN", "YANDEX_TOKEN", "CHANNEL_ID"]
    missing = [var for var in required_vars if not os.getenv(var)]
    
    if missing:
        logger.error(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {', '.join(missing)}")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        loop = asyncio.get_event_loop()
        loop.create_task(track_checker())
        
        app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("stop", stop))
        
        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        app.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()
