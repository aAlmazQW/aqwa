import asyncio
import requests
import os
import logging
from urllib.parse import quote
from telegram import (
    Bot, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, Update,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters,
    CallbackQueryHandler
)
from telegram.error import BadRequest, TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_track_id = None
channel_message_id = None
bot_active = False
bot_status_message_id = None

def get_inline_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä", callback_data="start_tracker"),
            InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä", callback_data="stop_tracker")
        ],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="refresh_status")]
    ])

def generate_multi_service_link(track_title: str, artist: str, yandex_link: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –º—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞"""
    base_url = "https://song.link/ya/"
    query = f"{artist} - {track_title}"
    return f"{base_url}?q={quote(query)}&ref=yamusic_bot"

def get_current_track():
    try:
        headers = {
            "ya-token": YANDEX_TOKEN,
            "User-Agent": "Mozilla/5.0"
        }
        r = requests.get(
            "https://api_1.mipoh.ru/get_current_track_beta", 
            headers=headers, 
            timeout=10, 
            verify=False
        )
        
        if r.status_code != 200:
            logger.warning(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {r.status_code}")
            return None
            
        data = r.json()
        logger.debug(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {data}")

        if not data.get("track"):
            logger.info("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        t = data["track"]
        yandex_link = f"https://music.yandex.ru/track/{t.get('track_id')}"
        artists = ", ".join(t["artist"]) if isinstance(t.get("artist"), list) else t.get("artist", "")
        
        return {
            "id": t.get("track_id"),
            "title": t.get("title"),
            "artists": artists,
            "yandex_link": yandex_link,
            "multi_link": generate_multi_service_link(t.get("title"), artists, yandex_link),
            "img": t.get("img")
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}", exc_info=True)
        return None

async def send_new_track_message(bot: Bot, track: dict) -> int:
    try:
        caption = f"{track['title']} ‚Äî {track['artists']}"
        
        keyboard = [
            [InlineKeyboardButton("üéµ –°–ª—É—à–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö",
                                   url=track['multi_link'])]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        msg = await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=track["img"],
            caption=caption,
            reply_markup=markup
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: {caption}")
        return msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
        return None

async def edit_track_message(bot: Bot, track: dict, msg_id: int) -> bool:
    try:
        caption = f"{track['title']} ‚Äî {track['artists']}"
        media = InputMediaPhoto(media=track["img"], caption=caption)
        
        keyboard =[
            [InlineKeyboardButton("üéµ –°–ª—É—à–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö",
                                    url=track['multi_link'])]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        await bot.edit_message_media(
            chat_id=CHANNEL_ID,
            message_id=msg_id,
            media=media,
            reply_markup=markup
        )
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ç—Ä–µ–∫: {track['title']}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
        return False

async def delete_message(bot: Bot, chat_id: int, msg_id: int):
    try:
        await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

async def update_status_message(bot: Bot, chat_id: int, text: str):
    global bot_status_message_id
    
    try:
        if bot_status_message_id:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=bot_status_message_id,
                text=text,
                reply_markup=get_inline_keyboard()
            )
        else:
            msg = await bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=get_inline_keyboard()
            )
            bot_status_message_id = msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def track_checker():
    global last_track_id, channel_message_id, bot_active
    
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    logger.info("–¢—Ä–µ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    while bot_active:
        track = get_current_track()
        
        if track:
            if channel_message_id:
                if track["id"] != last_track_id:
                    if not await edit_track_message(bot, track, channel_message_id):
                        channel_message_id = await send_new_track_message(bot, track)
                    last_track_id = track["id"]
            else:
                channel_message_id = await send_new_track_message(bot, track)
                last_track_id = track["id"]
        
        await asyncio.sleep(5)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_active, channel_message_id
    query = update.callback_query
    await query.answer()
    
    if query.data == "start_tracker":
        if bot_active:
            await update_status_message(
                context.bot,
                query.message.chat.id,
                "üî¥ –¢—Ä–µ–∫–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
            )
            return
        
        bot_active = True
        channel_message_id = None
        asyncio.create_task(track_checker())
        await update_status_message(
            context.bot,
            query.message.chat.id,
            "üü¢ –¢—Ä–µ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ..."
        )
    elif query.data == "stop_tracker":
        if not bot_active:
            await update_status_message(
                context.bot,
                query.message.chat.id,
                "üî¥ –¢—Ä–µ–∫–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
            )
            return
        
        bot_active = False
        if channel_message_id:
            await delete_message(
                context.bot,
                CHANNEL_ID,
                channel_message_id
            )
            channel_message_id = None
        
        await update_status_message(
            context.bot,
            query.message.chat.id,
            "‚èπÔ∏è –¢—Ä–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ."
        )
    elif query.data == "refresh_status":
        status_text = "üü¢ –¢—Ä–µ–∫–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω" if bot_active else "üî¥ –¢—Ä–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        await update_status_message(
            context.bot,
            query.message.chat.id,
            f"{status_text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global bot_status_message_id
    
    if bot_status_message_id:
        try:
            await delete_message(
                context.bot,
                update.effective_chat.id,
                bot_status_message_id
            )
        except:
            pass
    
    msg = await update.message.reply_text(
        "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_inline_keyboard()
    )
    bot_status_message_id = msg.message_id

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["TELEGRAM_BOT_TOKEN", "YANDEX_TOKEN", "CHANNEL_ID"]
    missing = [var for var in required_vars if not os.getenv(var)]
    
    if missing:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        return
    
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    app.run_polling()

if __name__ == "__main__":
    main()
