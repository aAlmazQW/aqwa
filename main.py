import asyncio
import requests
import os
import logging
from urllib.parse import quote
from telegram import (
    Bot, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, Update,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters,
    CallbackQueryHandler
)
from telegram.error import BadRequest, TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_track_id = None
channel_message_id = None
bot_active = False
bot_status_message_id = None

def get_inline_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä", callback_data="start_tracker"),
            InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä", callback_data="stop_tracker")
        ],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="refresh_status")]
    ])

# NEW: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ song.link
def generate_multi_service_link(track_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ song.link –ø–æ ID —Ç—Ä–µ–∫–∞"""
    return f"https://song.link/ya/{track_id}"

def get_current_track():
    try:
        headers = {
            "ya-token": YANDEX_TOKEN,
            "User-Agent": "Mozilla/5.0"
        }
        r = requests.get(
            "https://api_1.mipoh.ru/get_current_track_beta", 
            headers=headers, 
            timeout=10, 
            verify=False
        )
        
        if r.status_code != 200:
            logger.warning(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {r.status_code}")
            return None
            
        data = r.json()
        logger.debug(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {data}")

        if not data.get("track"):
            logger.info("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        t = data["track"]
        track_id = t.get("track_id")
        if not track_id:  # NEW: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ID
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Ç—Ä–µ–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API")
            return None

        artists = ", ".join(t["artist"]) if isinstance(t.get("artist"), list) else t.get("artist", "")
        
        return {
            "id": track_id,
            "title": t.get("title"),
            "artists": artists,
            "yandex_link": f"https://music.yandex.ru/track/{track_id}",
            "multi_link": generate_multi_service_link(track_id),  # NEW: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
            "img": t.get("img")
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}", exc_info=True)
        return None

async def send_new_track_message(bot: Bot, track: dict) -> int:
    try:
        caption = f"{track['title']} ‚Äî {track['artists']}"
        
        # NEW: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üîä –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞", url=track['yandex_link']),
                InlineKeyboardButton("üåç –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", url=track['multi_link'])
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        msg = await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=track["img"],
            caption=caption,
            reply_markup=markup
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: {caption}")
        return msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
        return None

async def edit_track_message(bot: Bot, track: dict, msg_id: int) -> bool:
    try:
        caption = f"{track['title']} ‚Äî {track['artists']}"
        media = InputMediaPhoto(media=track["img"], caption=caption)
        
        # NEW: –¢–∞ –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, —á—Ç–æ –∏ –≤ send_new_track_message
        keyboard = [
            [
                InlineKeyboardButton("üîä –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞", url=track['yandex_link']),
                InlineKeyboardButton("üåç –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", url=track['multi_link'])
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        await bot.edit_message_media(
            chat_id=CHANNEL_ID,
            message_id=msg_id,
            media=media,
            reply_markup=markup
        )
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ç—Ä–µ–∫: {track['title']}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
        return False

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: delete_message, update_status_message, track_checker, button_handler, start_command)

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["TELEGRAM_BOT_TOKEN", "YANDEX_TOKEN", "CHANNEL_ID"]
    missing = [var for var in required_vars if not os.getenv(var)]
    
    if missing:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        return
    
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    app.run_polling()

if __name__ == "__main__":
    main()
