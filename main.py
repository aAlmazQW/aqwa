import asyncio
import requests
import os
import logging
from telegram import (
    Bot, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, Update
)
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import BadRequest, TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_track_id = None
message_id = None
bot_active = False
is_paused = False
last_image = None

def get_current_track():
    global is_paused
    
    try:
        headers = {
            "ya-token": YANDEX_TOKEN,
            "User-Agent": "Mozilla/5.0"
        }
        r = requests.get(
            "https://api_1.mipoh.ru/get_current_track_beta", 
            headers=headers, 
            timeout=10, 
            verify=False
        )
        
        if r.status_code != 200:
            logger.warning(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {r.status_code}")
            return None
            
        data = r.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        if not data.get("track"):
             is_paused = True
        return None
        else:
        is_paused = False
            
        t = data["track"]
        return {
            "id": t.get("track_id"),
            "title": t.get("title"),
            "artists": t.get("artist") if isinstance(t.get("artist"), str) else ", ".join(t.get("artist", [])),
            "link": f"https://music.yandex.ru/track/{t.get('track_id')}",
            "img": t.get("img")
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}", exc_info=True)
        return None

async def send_new_track_message(bot: Bot, track: dict) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID"""
    try:
        caption = f"{track['title']} ‚Äî {track['artists']}"
        keyboard = [[InlineKeyboardButton("üéß –°–ª—É—à–∞—Ç—å –≤ –Ø.–ú—É–∑—ã–∫–µ", url=track["link"])]]
        markup = InlineKeyboardMarkup(keyboard)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")
        msg = await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=track["img"],
            caption=caption,
            reply_markup=markup
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: {msg.message_id}")
        return msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        return None

async def send_pause_message(bot: Bot) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID"""
    try:
        text = "‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ"
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–∞—É–∑–µ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")
        msg = await bot.send_message(
            chat_id=CHANNEL_ID,
            text=text
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: {msg.message_id}")
        return msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–∞—É–∑–µ: {e}", exc_info=True)
        return None

async def edit_track_message(bot: Bot, track: dict, msg_id: int) -> bool:
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫–æ–º"""
    try:
        caption = f"{track['title']} ‚Äî {track['artists']}"
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞: {caption}")
        
        media = InputMediaPhoto(media=track["img"], caption=caption)
        keyboard = [[InlineKeyboardButton("üéß –°–ª—É—à–∞—Ç—å –≤ –Ø.–ú—É–∑—ã–∫–µ", url=track["link"])]]
        markup = InlineKeyboardMarkup(keyboard)
        
        logger.info(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ID: {msg_id}")
        await bot.edit_message_media(
            chat_id=CHANNEL_ID,
            message_id=msg_id,
            media=media,
            reply_markup=markup
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        return True
    except BadRequest as e:
        if "Message to edit not found" in str(e) or "message_id_invalid" in str(e).lower():
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
            return False
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
            return False
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}", exc_info=True)
        return False
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return False

async def edit_to_pause_message(bot: Bot, msg_id: int, last_image: str) -> bool:
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã"""
    try:
        caption = "‚è∏Ô∏è –ú—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ"
        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã, ID: {msg_id}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–±–ª–æ–∂–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if last_image:
            media = InputMediaPhoto(media=last_image, caption=caption)
            await bot.edit_message_media(
                chat_id=CHANNEL_ID,
                message_id=msg_id,
                media=media,
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–ª–æ–∂–∫–∏, –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await bot.edit_message_caption(
                chat_id=CHANNEL_ID,
                message_id=msg_id,
                caption=caption,
                reply_markup=None
            )
            
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Å—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ –ø–∞—É–∑—É: {e}", exc_info=True)
        return False

async def delete_channel_message(bot: Bot, msg_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ID: {msg_id}")
        await bot.delete_message(chat_id=CHANNEL_ID, message_id=msg_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        return True
    except BadRequest as e:
        if "message to delete not found" in str(e).lower():
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        return False
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", exc_info=True)
        return False
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", exc_info=True)
        return False

async def track_checker():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤"""
    global last_track_id, message_id, bot_active, is_paused, last_image
    
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    logger.info("–ó–∞–¥–∞—á–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    was_paused = False
    
    while True:
        if not bot_active:
            await asyncio.sleep(5)
            continue
            
        track = get_current_track()
        
        # –ï—Å–ª–∏ –º—É–∑—ã–∫–∞ –Ω–∞ –ø–∞—É–∑–µ
        if is_paused:
            if not was_paused:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞—É–∑–∞")
                
                if message_id:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    success = await edit_to_pause_message(bot, message_id, last_image)
                    if not success:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        new_msg_id = await send_pause_message(bot)
                        if new_msg_id:
                            message_id = new_msg_id
                else:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    new_msg_id = await send_pause_message(bot)
                    if new_msg_id:
                        message_id = new_msg_id
                
                was_paused = True
        else:
            # –ï—Å–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ
            if was_paused:
                logger.info("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                was_paused = False
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–∞
            if track:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–æ–∂–∫—É –Ω–∞ —Å–ª—É—á–∞–π –ø–∞—É–∑—ã
                last_image = track["img"]
                
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                if message_id is None:
                    new_msg_id = await send_new_track_message(bot, track)
                    if new_msg_id:
                        message_id = new_msg_id
                        last_track_id = track["id"]
                    else:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫")
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if track["id"] != last_track_id:
                        success = await edit_track_message(bot, track, message_id)
                        if success:
                            last_track_id = track["id"]
                        else:
                            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞—é ID")
                            message_id = None  # –°–±—Ä–æ—Å–∏—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        await asyncio.sleep(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global bot_active, message_id
    
    if bot_active:
        await update.message.reply_text("üî¥ –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    bot_active = True
    message_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
    
    await update.message.reply_text("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢—Ä–µ–∫ –Ω–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è.")
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
    global bot_active, message_id, last_track_id, is_paused, last_image
    
    if not bot_active:
        await update.message.reply_text("üî¥ –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    bot_active = False
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
    if message_id:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await delete_channel_message(bot, message_id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    message_id = None
    last_track_id = None
    is_paused = False
    last_image = None
    
    await update.message.reply_text("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /stop - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["TELEGRAM_BOT_TOKEN", "YANDEX_TOKEN", "CHANNEL_ID"]
    missing = [var for var in required_vars if not os.getenv(var)]
    
    if missing:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
        return
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ID: {CHANNEL_ID}")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
    loop = asyncio.get_event_loop()
    loop.create_task(track_checker())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ /start –∏ /stop...")
    application.run_polling()

if __name__ == "__main__":
    main()
