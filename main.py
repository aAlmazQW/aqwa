import asyncio
import requests
import os
from telegram import (
    Bot, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, Update
)
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import BadRequest

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_track_id = None
message_id = None
bot_active = False  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
tracker_task = None  # –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤

def get_current_track():
    try:
        headers = {
            "ya-token": YANDEX_TOKEN,
            "User-Agent": "Mozilla/5.0"
        }
        r = requests.get("https://api_1.mipoh.ru/get_current_track_beta", 
                         headers=headers, timeout=10, verify=False)
        if r.status_code != 200:
            return None
        data = r.json()
        print("API:", data)
        if not data.get("track"):
            return None
        t = data["track"]
        return {
            "id": t.get("track_id"),
            "title": t.get("title"),
            "artists": t.get("artist") if isinstance(t.get("artist"), str) else ", ".join(t.get("artist", [])),
            "link": f"https://music.yandex.ru/track/{t.get('track_id')}",
            "img": t.get("img")
        }
    except Exception as e:
        print("–û—à–∏–±–∫–∞ API:", e)
        return None

async def track_checker(bot: Bot):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤"""
    global last_track_id, message_id, bot_active
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message_id is None:
        track = get_current_track()
        if track:
            caption = f"{track['title']} ‚Äî {track['artists']}"
            keyboard = [[InlineKeyboardButton("üéß –°–ª—É—à–∞—Ç—å –≤ –Ø.–ú—É–∑—ã–∫–µ", url=track["link"])]]
            markup = InlineKeyboardMarkup(keyboard)
            try:
                msg = await bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=track["img"],
                    caption=caption,
                    reply_markup=markup
                )
                message_id = msg.message_id
                last_track_id = track["id"]
                print("‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                print(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    while bot_active:
        track = get_current_track()
        if isinstance(track, dict) and track["id"] != last_track_id:
            last_track_id = track["id"]
            caption = f"{track['title']} ‚Äî {track['artists']}"
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞:", caption)
            
            try:
                media = InputMediaPhoto(media=track["img"], caption=caption)
                keyboard = [[InlineKeyboardButton("üéß –°–ª—É—à–∞—Ç—å –≤ –Ø.–ú—É–∑—ã–∫–µ", url=track["link"])]]
                markup = InlineKeyboardMarkup(keyboard)
                
                await bot.edit_message_media(
                    chat_id=CHANNEL_ID,
                    message_id=message_id,
                    media=media,
                    reply_markup=markup
                )
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            except BadRequest as e:
                if "Message to edit not found" in str(e):
                    print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞—é ID")
                    message_id = None  # –°–±—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                else:
                    print("üö® –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", e)
            except Exception as e:
                print("üö® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", e)
        
        await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global bot_active, tracker_task
    
    if bot_active:
        await update.message.reply_text("üî¥ –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return
    
    bot_active = True
    tracker_task = asyncio.create_task(track_checker(context.bot))
    await update.message.reply_text("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢—Ä–µ–∫ –Ω–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è.")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
    global bot_active, tracker_task
    
    if not bot_active:
        await update.message.reply_text("üî¥ –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    bot_active = False
    if tracker_task:
        tracker_task.cancel()
    await update.message.reply_text("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã.")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ /start –∏ /stop...")
    application.run_polling()

if __name__ == "__main__":
    main()