import asyncio
import requests
import os
import logging
from urllib.parse import quote
from telegram import (
    Bot, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, Update
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_track_id = None
channel_message_id = None
bot_active = False
bot_status_message_id = None

def get_inline_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start_tracker"),
            InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_tracker")
        ]
    ])

def generate_multi_link(track_id: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ song.link"""
    return f"https://song.link/ya/{track_id}"

def generate_genius_url(title: str, artist: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ Genius"""
    return f"https://genius.com/search?q={quote(title+' '+artist)}"

def get_current_track():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"""
    try:
        headers = {"ya-token": YANDEX_TOKEN}
        response = requests.get(
            "https://api_1.mipoh.ru/get_current_track_beta",
            headers=headers,
            timeout=10
        )
        
        if response.status_code != 200:
            return None
            
        data = response.json()
        if not data.get("track"):
            return None
            
        track = data["track"]
        track_id = track.get("track_id")
        if not track_id:
            return None

        artists = ", ".join(track["artist"]) if isinstance(track.get("artist"), list) else track.get("artist", "")
        
        return {
            "id": track_id,
            "title": track.get("title"),
            "artists": artists,
            "yandex_link": f"https://music.yandex.ru/track/{track_id}",
            "multi_link": generate_multi_link(track_id),
            "genius_url": generate_genius_url(track.get("title"), artists),
            "img": track.get("img")
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return None

async def send_new_track_message(bot: Bot, track: dict) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫–æ–º"""
    try:
        keyboard = [
            [
                InlineKeyboardButton("üîä –°–ª—É—à–∞—Ç—å", url=track['yandex_link']),
                InlineKeyboardButton("üåç –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", url=track['multi_link'])
            ],
            [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏", url=track['genius_url'])]
        ]
        
        msg = await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=track["img"],
            caption=f"{track['title']} ‚Äî {track['artists']}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return None

async def edit_track_message(bot: Bot, track: dict, msg_id: int) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫–æ–º"""
    try:
        keyboard = [
            [
                InlineKeyboardButton("üîä –°–ª—É—à–∞—Ç—å", url=track['yandex_link']),
                InlineKeyboardButton("üåç –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", url=track['multi_link'])
            ],
            [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏", url=track['genius_url'])]
        ]
        
        await bot.edit_message_media(
            chat_id=CHANNEL_ID,
            message_id=msg_id,
            media=InputMediaPhoto(media=track["img"], caption=f"{track['title']} ‚Äî {track['artists']}"),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False

async def track_checker():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤"""
    global last_track_id, channel_message_id, bot_active
    
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    logger.info("–¢—Ä–µ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    while bot_active:
        track = get_current_track()
        if track:
            if channel_message_id and track["id"] != last_track_id:
                if not await edit_track_message(bot, track, channel_message_id):
                    channel_message_id = await send_new_track_message(bot, track)
                last_track_id = track["id"]
            elif not channel_message_id:
                channel_message_id = await send_new_track_message(bot, track)
                last_track_id = track["id"]
        await asyncio.sleep(5)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    global bot_active, channel_message_id
    
    query = update.callback_query
    await query.answer()
    
    if query.data == "start_tracker" and not bot_active:
        bot_active = True
        channel_message_id = None
        asyncio.create_task(track_checker())
        await update.effective_message.reply_text("–¢—Ä–µ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω üéµ")
        
    elif query.data == "stop_tracker" and bot_active:
        bot_active = False
        if channel_message_id:
            try:
                await Bot(token=TELEGRAM_BOT_TOKEN).delete_message(
                    chat_id=CHANNEL_ID,
                    message_id=channel_message_id
                )
            except:
                pass
            channel_message_id = None
        await update.effective_message.reply_text("–¢—Ä–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚èπÔ∏è")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üéµ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=get_inline_keyboard()
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["TELEGRAM_BOT_TOKEN", "YANDEX_TOKEN", "CHANNEL_ID"]
    if missing := [var for var in required_vars if not os.getenv(var)]:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
